{"ast":null,"code":"// import React, { useEffect, useState } from 'react'\n// import NewsItem from './NewsItem'\n// import Spinner from './Spinner';\n// import PropTypes from 'prop-types'\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// const News = (props) => {\n//     const [articles, setArticles] = useState([])\n//     const [loading, setLoading] = useState(true)\n//     const [page, setPage] = useState(1)\n//     const [totalResults, setTotalResults] = useState(0)\n\n//     const capitalizeFirstLetter = (string) => {\n//         return string.charAt(0).toUpperCase() + string.slice(1);\n//     }\n\n//     const fetchNews = async (pageNumber = 1) => {\n\n//         props.setProgress(10);\n//         const url = \"https://google.serper.dev/news\";\n//         const apiKey = process.env.REACT_APP_SERPER_API;\n\n//         if (!apiKey) {\n//             console.error(\"API key is missing. Please check your .env file.\");\n//             return;\n//         }\n\n//         const options = {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 \"X-API-KEY\": apiKey\n//             },\n//             body: JSON.stringify({\n//                 q: props.category,\n//                 num: props.pageSize, // Number of results per request\n//                 page: pageNumber,\n//             }) // Search by category\n//         };\n\n//         setLoading(true);\n//         try {\n//             const response = await fetch(url, options);\n//             props.setProgress(30);\n//             const data = await response.json();\n//             props.setProgress(70);\n//             console.log(\"Fetched News Data:\", data);\n\n//             if (data.news) {\n//                 setArticles((prevArticles) =>\n//                     pageNumber === 1 ? data.news : [...prevArticles, ...data.news]\n//                 );\n//                 setTotalResults(data.credits * props.pageSize);\n//                 setPage(pageNumber);\n//             }\n\n//         } catch (error) {\n//             console.error(\"Error fetching news:\", error);\n//         }\n//         setLoading(false);\n//         props.setProgress(100);\n//     };\n\n//     // const updateNews = async ()=> {\n//     //     props.setProgress(10);\n//     //     const url = `https://google.serper.dev/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page}&pageSize=${props.pageSize}`; \n//     //     setLoading(true)\n//     //     let data = await fetch(url);\n//     //     props.setProgress(30);\n//     //     let parsedData = await data.json()\n//     //     props.setProgress(70);\n//     //     setArticles(parsedData.articles)\n//     //     setTotalResults(parsedData.totalResults)\n//     //     setLoading(false)\n//     //     props.setProgress(100);\n//     // }\n\n//     useEffect(() => {\n//         document.title = `${capitalizeFirstLetter(props.category)} - NewsMonkey`;\n//         // updateNews(); \n//         // eslint-disable-next-line\n//         fetchNews(1);\n//     }, [props.category])\n\n//     const fetchMoreData = async () => {\n//         // setPage(page + 1);\n//         const nextPage = page + 1; // Increment page first\n//         console.log(\"Fetching more news for page:\", nextPage);\n//         await fetchNews(nextPage);\n//         // await fetchNews(page + 1);\n//     };\n\n//     // const fetchMoreData = async () => {   \n//     //     const url = `https://google.serper.dev/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page+1}&pageSize=${props.pageSize}`;\n//     //     setPage(page+1) \n//     //     let data = await fetch(url);\n//     //     let parsedData = await data.json()\n//     //     setArticles(articles.concat(parsedData.articles))\n//     //     setTotalResults(parsedData.totalResults)\n//     //   };\n\n//     return (\n//         <>\n//             <h1 className=\"text-center\" style={{ margin: '35px 0px', marginTop: '90px' }}>NewsMonkey - Top {capitalizeFirstLetter(props.category)} Headlines</h1>\n//             {loading && <Spinner />}\n//             <InfiniteScroll\n//                 dataLength={articles.length}\n//                 next={fetchMoreData}\n//                 hasMore={articles.length !== totalResults}\n//                 loader={<Spinner />}\n//             >\n//                 <div className=\"container\">\n\n//                     <div className=\"row\">\n//                         {articles.map((element) => {\n//                             return <div className=\"col-md-4\" key={element.link}>\n//                                 <NewsItem title={element.title ? element.title : \"\"}\n//                                     description={element.section ? element.section : \"news\"}\n//                                     imageUrl={element.imageUrl}\n//                                     newsUrl={element.link}\n//                                     author={element.author}\n//                                     date={element.date}\n//                                     source={element.source} />\n//                             </div>\n//                         })}\n//                     </div>\n//                 </div>\n//             </InfiniteScroll>\n//         </>\n//     )\n\n// }\n\n// News.defaultProps = {\n//     country: 'in',\n//     pageSize: 8,\n//     category: 'general',\n// }\n\n// News.propTypes = {\n//     country: PropTypes.string,\n//     pageSize: PropTypes.number,\n//     category: PropTypes.string,\n//     setProgress: PropTypes.func.isRequired\n\n// }\n\n// export default News","map":{"version":3,"names":[],"sources":["C:/Users/KARTIK/Downloads/NewsMonkey--React-master/src/components/News.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react'\n// import NewsItem from './NewsItem'\n// import Spinner from './Spinner';\n// import PropTypes from 'prop-types'\n// import InfiniteScroll from \"react-infinite-scroll-component\";\n\n// const News = (props) => {\n//     const [articles, setArticles] = useState([])\n//     const [loading, setLoading] = useState(true)\n//     const [page, setPage] = useState(1)\n//     const [totalResults, setTotalResults] = useState(0)\n\n//     const capitalizeFirstLetter = (string) => {\n//         return string.charAt(0).toUpperCase() + string.slice(1);\n//     }\n\n\n\n//     const fetchNews = async (pageNumber = 1) => {\n\n//         props.setProgress(10);\n//         const url = \"https://google.serper.dev/news\";\n//         const apiKey = process.env.REACT_APP_SERPER_API;\n\n//         if (!apiKey) {\n//             console.error(\"API key is missing. Please check your .env file.\");\n//             return;\n//         }\n\n\n//         const options = {\n//             method: \"POST\",\n//             headers: {\n//                 \"Content-Type\": \"application/json\",\n//                 \"X-API-KEY\": apiKey\n//             },\n//             body: JSON.stringify({\n//                 q: props.category,\n//                 num: props.pageSize, // Number of results per request\n//                 page: pageNumber,\n//             }) // Search by category\n//         };\n\n//         setLoading(true);\n//         try {\n//             const response = await fetch(url, options);\n//             props.setProgress(30);\n//             const data = await response.json();\n//             props.setProgress(70);\n//             console.log(\"Fetched News Data:\", data);\n\n//             if (data.news) {\n//                 setArticles((prevArticles) =>\n//                     pageNumber === 1 ? data.news : [...prevArticles, ...data.news]\n//                 );\n//                 setTotalResults(data.credits * props.pageSize);\n//                 setPage(pageNumber);\n//             }\n\n//         } catch (error) {\n//             console.error(\"Error fetching news:\", error);\n//         }\n//         setLoading(false);\n//         props.setProgress(100);\n//     };\n\n\n\n//     // const updateNews = async ()=> {\n//     //     props.setProgress(10);\n//     //     const url = `https://google.serper.dev/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page}&pageSize=${props.pageSize}`; \n//     //     setLoading(true)\n//     //     let data = await fetch(url);\n//     //     props.setProgress(30);\n//     //     let parsedData = await data.json()\n//     //     props.setProgress(70);\n//     //     setArticles(parsedData.articles)\n//     //     setTotalResults(parsedData.totalResults)\n//     //     setLoading(false)\n//     //     props.setProgress(100);\n//     // }\n\n\n\n\n//     useEffect(() => {\n//         document.title = `${capitalizeFirstLetter(props.category)} - NewsMonkey`;\n//         // updateNews(); \n//         // eslint-disable-next-line\n//         fetchNews(1);\n//     }, [props.category])\n\n\n//     const fetchMoreData = async () => {\n//         // setPage(page + 1);\n//         const nextPage = page + 1; // Increment page first\n//         console.log(\"Fetching more news for page:\", nextPage);\n//         await fetchNews(nextPage);\n//         // await fetchNews(page + 1);\n//     };\n\n//     // const fetchMoreData = async () => {   \n//     //     const url = `https://google.serper.dev/top-headlines?country=${props.country}&category=${props.category}&apiKey=${props.apiKey}&page=${page+1}&pageSize=${props.pageSize}`;\n//     //     setPage(page+1) \n//     //     let data = await fetch(url);\n//     //     let parsedData = await data.json()\n//     //     setArticles(articles.concat(parsedData.articles))\n//     //     setTotalResults(parsedData.totalResults)\n//     //   };\n\n//     return (\n//         <>\n//             <h1 className=\"text-center\" style={{ margin: '35px 0px', marginTop: '90px' }}>NewsMonkey - Top {capitalizeFirstLetter(props.category)} Headlines</h1>\n//             {loading && <Spinner />}\n//             <InfiniteScroll\n//                 dataLength={articles.length}\n//                 next={fetchMoreData}\n//                 hasMore={articles.length !== totalResults}\n//                 loader={<Spinner />}\n//             >\n//                 <div className=\"container\">\n\n//                     <div className=\"row\">\n//                         {articles.map((element) => {\n//                             return <div className=\"col-md-4\" key={element.link}>\n//                                 <NewsItem title={element.title ? element.title : \"\"}\n//                                     description={element.section ? element.section : \"news\"}\n//                                     imageUrl={element.imageUrl}\n//                                     newsUrl={element.link}\n//                                     author={element.author}\n//                                     date={element.date}\n//                                     source={element.source} />\n//                             </div>\n//                         })}\n//                     </div>\n//                 </div>\n//             </InfiniteScroll>\n//         </>\n//     )\n\n// }\n\n\n// News.defaultProps = {\n//     country: 'in',\n//     pageSize: 8,\n//     category: 'general',\n// }\n\n// News.propTypes = {\n//     country: PropTypes.string,\n//     pageSize: PropTypes.number,\n//     category: PropTypes.string,\n//     setProgress: PropTypes.func.isRequired\n\n// }\n\n// export default News\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module"}